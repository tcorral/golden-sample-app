name: Aider Auto Code Update

on:
  issues:
    types: [opened, labeled]

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  process-issue:
    runs-on: ubuntu-latest
    if: contains(join(github.event.issue.labels.*.name, ','), 'aider')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: sudo apt-get install -y build-essential python3-dev

    - name: Install Python build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: Install Aider
      run: pip install aider-chat boto3
  
    - name: Extract issue sections
      id: extract-sections
      run: |
        # Extract and flatten markdown content
        BODY=$(echo "${{ github.event.issue.body }}" | sed 's/\\r//g')
        
        # Extract components and convert to single line
        DESCRIPTION=$(echo "$BODY" | awk '/## Description/{flag=1; next} /## Files to modify/{flag=0} flag' | tr '\n' ' ' | sed 's/\*\*//g; s/  \+/ /g')
        FILES=$(echo "$BODY" | awk '/## Files to modify/{flag=1; next} /## Acceptance criteria/{flag=0} flag' | sed -e 's/^- //' -e '/^$/d' -e 's/^ *//' | xargs -n 1 sh -c '[ -f "$0" ] && echo "$0"' | tr '\n' ' ')
        ACCEPTANCE=$(echo "$BODY" | awk '/## Acceptance criteria/{flag=1; next} /```|^$/{flag=0} flag' | tr '\n' ' ' | sed 's/\*\*//g; s/  \+/ /g; s/\. /. /g')

        # Create single-line prompt with section markers
        PROMPT="PROBLEM: ${DESCRIPTION} | BEHAVIOR: ${ACCEPTANCE} | FILES: ${FILES} | REQUIREMENTS: Implement all fixes in one pass following Angular best practices, update tests, ensure cookie handling works cross-browser"
        
        echo "$PROMPT" > prompt.txt
        echo "$FILES" > files.txt

    - name: Run Aider
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        FILES=$(tr ' ' '\n' < files.txt | xargs -I{} sh -c '[ -f "{}" ] && echo "{}"' | tr '\n' ' ')
        echo "Validated files: $FILES"
        echo "Final prompt content:"
        cat prompt.txt
        
        # Run Aider with commit message in the prompt
        { echo -e "$(cat prompt.txt)\n\nCOMMIT_MESSAGE: Fix locale selector - ${{ github.event.issue.title }} (#${{ github.event.issue.number }})"; } | \
          aider --yes --model anthropic/claude-3-7-sonnet-latest $FILES

    - name: Check for changes
      id: changes
      run: |
        git fetch origin main
        if ! git diff --quiet main HEAD; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected:"
          git diff main HEAD --stat
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        fi

    - name: Debug Aider changes
      run: |
        echo "Current working tree status:"
        git status --porcelain
        echo "Files modified:"
        git diff --name-only

    - name: Create and push branch
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        BRANCH_NAME="aider-fix-${{ github.event.issue.number }}"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        git checkout -B $BRANCH_NAME
        git push origin $BRANCH_NAME --force-with-lease
        echo "Branch pushed with commit:"
        git log -1
  
    - name: Verify Remote Branch
      run: |
        git fetch origin ${{ env.BRANCH_NAME }}
        git branch -r
  
    - name: List Remote Branches
      run: git ls-remote --heads origin

    - name: Create Pull Request
      if: steps.changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "fix: ${{ github.event.issue.title }}"
        body: |
          **Automated Fix Summary**  
          - Addresses issue #${{ github.event.issue.number }}  
          - Implemented by Aider AI assistant  
          - Branch: ${{ env.BRANCH_NAME }}  
          - Commit: $(git rev-parse HEAD)
        branch: ${{ env.BRANCH_NAME }}
        base: main
        delete-branch: false

