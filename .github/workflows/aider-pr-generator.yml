name: Aider Automation

on:
  issues:
    types: [opened, labeled]

jobs:
  aider-process:
    # Only run when the 'aider' label is added
    if: contains(github.event.issue.labels.*.name, 'aider')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Aider
        run: |
          pip install aider-chat
      
      - name: Parse issue content
        id: parse-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            const issueTitle = issue.title || '';
            
            // Extract sections using regex
            const descriptionMatch = issueBody.match(/## Description\s+([\s\S]*?)(?=## Files to modify|## Acceptance criteria|$)/);
            const filesToModifyMatch = issueBody.match(/## Files to modify\s+([\s\S]*?)(?=## Description|## Acceptance criteria|$)/);
            const acceptanceCriteriaMatch = issueBody.match(/## Acceptance criteria\s+([\s\S]*?)(?=## Description|## Files to modify|$)/);
            
            const description = descriptionMatch ? descriptionMatch[1].trim() : '';
            const filesToModify = filesToModifyMatch ? filesToModifyMatch[1].trim() : '';
            const acceptanceCriteria = acceptanceCriteriaMatch ? acceptanceCriteriaMatch[1].trim() : '';
            
            // Generate Aider prompt
            const aiderPrompt = `Task: ${issueTitle}\n\n${description}\n\nAcceptance Criteria:\n${acceptanceCriteria}`;
            
            // Parse files to modify
            const filesList = filesToModify
              .split('\n')
              .map(line => line.replace(/^\*\s*/, '').trim())
              .filter(file => file);
            
            core.setOutput('aider-prompt', aiderPrompt);
            core.setOutput('files-to-modify', JSON.stringify(filesList));
            core.setOutput('issue-title', issueTitle.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase());
            core.setOutput('issue-number', issue.number);
      
      - name: Create branch
        run: |
          BRANCH_NAME="aider/issue-${{ steps.parse-issue.outputs.issue-number }}-${{ steps.parse-issue.outputs.issue-title }}"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
      
      - name: Set up Aider credentials
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
      
      - name: Write prompt to file
        run: |
          cat > prompt.txt << 'EOL'
          ${{ steps.parse-issue.outputs.aider-prompt }}
          EOL
      
      - name: Run Aider with files
        id: run-aider
        if: ${{ fromJSON(steps.parse-issue.outputs.files-to-modify) != [] }}
        run: |
          # Get the files list from output
          FILES=$(echo '${{ steps.parse-issue.outputs.files-to-modify }}' | jq -r '.[]')
          
          # Run aider with the files
          echo "Running Aider on specific files"
          aider --no-auto-commits --apply-only $FILES < prompt.txt
      
      - name: Run Aider on whole repository
        id: run-aider-whole-repo
        if: ${{ fromJSON(steps.parse-issue.outputs.files-to-modify) == [] }}
        run: |
          # Run aider on the whole repository
          echo "Running Aider on the whole repository"
          aider --no-auto-commits --apply-only < prompt.txt
      
      - name: Commit changes
        id: commit
        run: |
          git add .
          git status
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Fix issue #${{ steps.parse-issue.outputs.issue-number }}: ${{ steps.parse-issue.outputs.issue-title }}"
            git push --set-upstream origin $BRANCH_NAME
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const result = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Fix issue #${context.payload.issue.number}: ${context.payload.issue.title}`,
              body: `This PR addresses issue #${context.payload.issue.number}.\n\nImplemented changes based on Aider suggestions to meet the following acceptance criteria:\n\n${context.payload.issue.body.match(/## Acceptance criteria\s+([\s\S]*?)(?=## |$)/)?.[1] || 'No acceptance criteria provided.'}`,
              head: process.env.BRANCH_NAME,
              base: 'main'
            });
            
            // Add label to the PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: result.data.number,
              labels: ['aider-generated']
            });
            
            // Link the PR to the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `I've created PR #${result.data.number} with changes to address this issue.`
            });