name: Aider Automation

on:
  issues:
    types: [opened, labeled]

jobs:
  aider-automate:
    if: ${{ github.event.label.name == 'aider' || contains(github.event.issue.labels.*.name, 'aider') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Aider and dependencies
        run: |
          pip install aider-chat
          pip install GitPython

      - name: Parse issue and prepare for Aider
        id: parse-issue
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          python -c "
          import os
          import re
          import json
          
          # Get issue details
          issue_number = os.environ['ISSUE_NUMBER']
          issue_title = os.environ['ISSUE_TITLE']
          issue_body = os.environ['ISSUE_BODY']
          
          # Parse issue body to extract sections
          description = ''
          files_to_modify = []
          acceptance_criteria = ''
          
          description_match = re.search(r'## Description\s+(.*?)(?=##|\Z)', issue_body, re.DOTALL)
          if description_match:
              description = description_match.group(1).strip()
          
          files_match = re.search(r'## Files to modify\s+(.*?)(?=##|\Z)', issue_body, re.DOTALL)
          if files_match:
              files_text = files_match.group(1).strip()
              # Extract filenames (assuming one filename per line or comma-separated)
              files_to_modify = [f.strip() for f in re.split(r'[\n,]', files_text) if f.strip()]
          
          criteria_match = re.search(r'## Acceptance criteria\s+(.*?)(?=##|\Z)', issue_body, re.DOTALL)
          if criteria_match:
              acceptance_criteria = criteria_match.group(1).strip()
          
          # Create branch name
          branch_name = f'fix/issue-{issue_number}'
          
          # Construct prompt for Aider
          prompt = f\"\"\"
          # Task: {issue_title}
          
          ## Description
          {description}
          
          ## Acceptance Criteria
          {acceptance_criteria}
          
          Please implement the necessary changes to address this issue.
          \"\"\"
          
          # Write prompt to a file
          with open('aider_prompt.txt', 'w') as f:
              f.write(prompt)
          
          # Save files to modify to a JSON file
          with open('files_to_modify.json', 'w') as f:
              json.dump(files_to_modify, f)
          
          # Save branch name and issue info
          with open('issue_info.json', 'w') as f:
              json.dump({
                  'branch_name': branch_name,
                  'issue_number': issue_number,
                  'issue_title': issue_title,
                  'description': description,
                  'acceptance_criteria': acceptance_criteria
              }, f)
          
          # Write to GitHub outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'branch_name={branch_name}\\n')
          "

      - name: Create and switch to branch
        id: create-branch
        run: |
          ISSUE_INFO=$(cat issue_info.json)
          BRANCH_NAME=$(echo $ISSUE_INFO | jq -r '.branch_name')
          
          # Make sure we're on the main branch first
          git checkout main
          
          # Create a new branch or checkout if it exists
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
            git checkout $BRANCH_NAME
            echo "Switched to existing branch $BRANCH_NAME"
          else
            git checkout -b $BRANCH_NAME
            echo "Created and switched to branch $BRANCH_NAME"
          fi
          
          # Set git identity for the commit
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Run Aider on files
        id: run-aider
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Load the files to modify
          FILES_TO_MODIFY=$(cat files_to_modify.json)
          PROMPT=$(cat aider_prompt.txt)
          
          echo "Running Aider with prompt:"
          echo "$PROMPT"
          
          # Create an Aider script that will run non-interactively
          cat > run_aider.py << 'EOF'
          import os
          import sys
          import json
          import subprocess
          from pathlib import Path
          
          # Load files to modify
          with open('files_to_modify.json', 'r') as f:
              files_to_modify = json.load(f)
          
          # Load prompt
          with open('aider_prompt.txt', 'r') as f:
              prompt = f.read()
          
          # Get Anthropic API key from environment
          anthropic_api_key = os.environ.get('ANTHROPIC_API_KEY')
          if not anthropic_api_key:
              print("Error: ANTHROPIC_API_KEY environment variable not set")
              sys.exit(1)
          
          # Prepare Aider command
          aider_cmd = ['aider', '--no-auto-commit', '--yes']
          
          # Add files to modify if specified
          if files_to_modify:
              aider_cmd.extend(files_to_modify)
          
          # Add --apply flag to run non-interactively
          aider_cmd.append('--apply')
          
          # Write prompt to a temporary file that Aider can read
          prompt_file = Path('prompt_for_aider.txt')
          prompt_file.write_text(prompt)
          
          # Add prompt file to command
          aider_cmd.extend(['--message-file', 'prompt_for_aider.txt'])
          
          # Run Aider
          print(f"Running command: {' '.join(aider_cmd)}")
          result = subprocess.run(aider_cmd, capture_output=True, text=True)
          
          # Log the output
          print("Aider stdout:")
          print(result.stdout)
          
          print("Aider stderr:")
          print(result.stderr)
          
          # Check exit code
          print(f"Aider exit code: {result.returncode}")
          
          # Write true/false to a file based on whether changes were made
          changes_made = result.returncode == 0 and "No changes to commit" not in result.stdout
          with open('changes_made.txt', 'w') as f:
              f.write(str(changes_made).lower())
          EOF
          
          # Run the Aider script
          python run_aider.py
          
          # Check if changes were made
          CHANGES_MADE=$(cat changes_made.txt)
          echo "Changes made: $CHANGES_MADE"
          
          # Write to GitHub outputs
          echo "changes_made=$CHANGES_MADE" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.run-aider.outputs.changes_made == 'true'
        run: |
          # Check if there are changes to commit
          if [[ -n $(git status --porcelain) ]]; then
            # Commit the changes
            ISSUE_INFO=$(cat issue_info.json)
            ISSUE_NUMBER=$(echo $ISSUE_INFO | jq -r '.issue_number')
            ISSUE_TITLE=$(echo $ISSUE_INFO | jq -r '.issue_title')
            BRANCH_NAME=$(echo $ISSUE_INFO | jq -r '.branch_name')
            
            git add .
            git commit -m "Fix issue #${ISSUE_NUMBER}: ${ISSUE_TITLE}"
            git push --set-upstream origin $BRANCH_NAME
            
            echo "changes_committed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"
            echo "changes_committed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.run-aider.outputs.changes_made == 'true'
        run: |
          ISSUE_INFO=$(cat issue_info.json)
          ISSUE_NUMBER=$(echo $ISSUE_INFO | jq -r '.issue_number')
          ISSUE_TITLE=$(echo $ISSUE_INFO | jq -r '.issue_title')
          BRANCH_NAME=$(echo $ISSUE_INFO | jq -r '.branch_name')
          DESCRIPTION=$(echo $ISSUE_INFO | jq -r '.description')
          ACCEPTANCE_CRITERIA=$(echo $ISSUE_INFO | jq -r '.acceptance_criteria')
          
          PR_TITLE="Fix issue #${ISSUE_NUMBER}: ${ISSUE_TITLE}"
          PR_BODY="This PR addresses issue #${ISSUE_NUMBER} \
            ## Description \
            ${DESCRIPTION} \
            ## Acceptance Criteria \
            ${ACCEPTANCE_CRITERIA} \
            Automated changes made by Aider."
          
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Issue
        if: steps.run-aider.outputs.changes_made == 'true'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "I've created a pull request to address this issue using Aider. Please review the changes."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Report No Changes
        if: steps.run-aider.outputs.changes_made == 'false'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "Aider attempted to fix this issue but did not make any changes. Please review the issue description and try again."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}