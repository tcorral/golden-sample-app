name: Aider Automation

on:
  issues:
    types: [opened, labeled]

jobs:
  aider-automate:
    if: ${{ github.event.label.name == 'aider' || contains(github.event.issue.labels.*.name, 'aider') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Aider
        run: |
          pip install aider-chat
          pip install GitPython

      - name: Parse issue and run Aider
        id: run-aider
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          python -c "
          import os
          import re
          import subprocess
          import git
          import json
          
          # Get issue details
          issue_number = os.environ['ISSUE_NUMBER']
          issue_title = os.environ['ISSUE_TITLE']
          issue_body = os.environ['ISSUE_BODY']
          
          # Parse issue body to extract sections
          description = ''
          files_to_modify = []
          acceptance_criteria = ''
          
          description_match = re.search(r'## Description\s+(.*?)(?=##|\Z)', issue_body, re.DOTALL)
          if description_match:
              description = description_match.group(1).strip()
          
          files_match = re.search(r'## Files to modify\s+(.*?)(?=##|\Z)', issue_body, re.DOTALL)
          if files_match:
              files_text = files_match.group(1).strip()
              # Extract filenames (assuming one filename per line or comma-separated)
              files_to_modify = [f.strip() for f in re.split(r'[\n,]', files_text) if f.strip()]
          
          criteria_match = re.search(r'## Acceptance criteria\s+(.*?)(?=##|\Z)', issue_body, re.DOTALL)
          if criteria_match:
              acceptance_criteria = criteria_match.group(1).strip()
          
          # Create a new branch
          repo = git.Repo('.')
          branch_name = f'fix/issue-{issue_number}'
          
          # Make sure we're on the main branch first
          repo.git.checkout('main')
          
          # Create a new branch or checkout if it exists
          try:
              repo.git.checkout('-b', branch_name)
              print(f'Created and switched to branch {branch_name}')
          except git.GitCommandError:
              repo.git.checkout(branch_name)
              print(f'Switched to existing branch {branch_name}')
          
          # Construct prompt for Aider
          prompt = f\"\"\"
          # Task: {issue_title}
          
          ## Description
          {description}
          
          ## Acceptance Criteria
          {acceptance_criteria}
          
          Please implement the necessary changes to address this issue.
          \"\"\"
          
          # Write prompt to a file for debugging
          with open('aider_prompt.txt', 'w') as f:
              f.write(prompt)
          
          # Run Aider with the appropriate files
          aider_command = ['aider']
          if files_to_modify:
              aider_command.extend(files_to_modify)
          
          # Run Aider with the prompt
          process = subprocess.Popen(
              aider_command,
              stdin=subprocess.PIPE,
              stdout=subprocess.PIPE,
              stderr=subprocess.PIPE,
              text=True
          )
          
          stdout, stderr = process.communicate(input=prompt)
          
          # Check if Aider made any changes
          status = repo.git.status('--porcelain')
          if status:
              # Commit changes
              repo.git.add('.')
              repo.git.commit('-m', f'Fix issue #{issue_number}: {issue_title}')
              
              # Push changes
              repo.git.push('--set-upstream', 'origin', branch_name)
              
              # Write PR details for next step
              pr_title = f'Fix issue #{issue_number}: {issue_title}'
              pr_body = f'''
              This PR addresses issue #{issue_number}
              
              ## Description
              {description}
              
              ## Acceptance Criteria
              {acceptance_criteria}
              
              Automated changes made by Aider.
              '''
              
              with open('pr_details.json', 'w') as f:
                  json.dump({
                      'title': pr_title,
                      'body': pr_body,
                      'branch': branch_name
                  }, f)
              
              print(f'::set-output name=changes_made::true')
              print(f'::set-output name=branch_name::{branch_name}')
          else:
              print('No changes were made by Aider')
              print(f'::set-output name=changes_made::false')
          "

      - name: Create Pull Request
        if: steps.run-aider.outputs.changes_made == 'true'
        run: |
          PR_DETAILS=$(cat pr_details.json)
          PR_TITLE=$(echo $PR_DETAILS | jq -r '.title')
          PR_BODY=$(echo $PR_DETAILS | jq -r '.body')
          BRANCH_NAME=$(echo $PR_DETAILS | jq -r '.branch')
          
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Issue
        if: steps.run-aider.outputs.changes_made == 'true'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "I've created a pull request to address this issue using Aider. Please review the changes."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Report No Changes
        if: steps.run-aider.outputs.changes_made == 'false'
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "Aider attempted to fix this issue but did not make any changes. Please review the issue description and try again."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}