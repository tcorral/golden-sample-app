name: Aider PR Generator

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  aider-pr-generator:
    runs-on: ubuntu-latest
    # Only run if the issue has the 'aider' label
    if: contains(github.event.issue.labels.*.name, 'aider')
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Check OpenAI API connectivity
        run: |
            echo "Testing OpenAI API connectivity..."

            curl --fail --max-time 10 -H "Authorization: Bearer $OPENAI_API_KEY" https://api.openai.com/v1/models || {
                echo "⚠️ OpenAI API is unreachable. Retrying in 30 seconds..."
                sleep 30
                curl --fail --max-time 10 -H "Authorization: Bearer $OPENAI_API_KEY" https://api.openai.com/v1/models || {
                    echo "❌ OpenAI API is still unreachable. Exiting."
                    exit 1
                }
            }

            echo "✅ OpenAI API is reachable! Running Aider..."
      - name: Install Aider and GitHub CLI
        run: |
          pip install aider-chat
          gh auth setup-git -h github.com
          gh auth status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract issue details and prepare for Aider
        run: |
          echo "Processing issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"
          echo "${{ github.event.issue.body }}" > issue_instructions.md
          echo "BRANCH_NAME=aider/issue-${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
      
      - name: Create and switch to new branch
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "action@github.com"
          git checkout -b ${{ env.BRANCH_NAME }}
      
      - name: Run Aider to implement requested changes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AIDER_AUTO_CONFIRM: "true"
          PYTHONIOENCODING: "utf-8"
        run: |
          # Extract file paths if they're included in the issue body (optional)
          FILES=$(grep -i "^files to modify:" issue_instructions.md -A 10 | grep -v "^files to modify:" | grep -v "^$" | sed 's/^- //' | tr '\n' ' ' || echo "")
          
          # Create a script that will apply the message to Aider
          echo "Creating message file for Aider"
          cat issue_instructions.md > aider_message.txt
          
          # Run Aider with appropriate options - using only available flags
          if [ -n "$FILES" ]; then
            echo "Focusing on specific files: $FILES"
            aider --no-git --no-check-update --no-show-release-notes --yes-always --message-file aider_message.txt $FILES
          else
            echo "No specific files mentioned, scanning entire repository"
            aider --no-git --no-check-update --no-show-release-notes --yes-always --message-file aider_message.txt
          fi
      
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git add .
          git commit -m "Implement changes for issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}"
          git push origin ${{ env.BRANCH_NAME }}
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --base main \
            --head "${{ env.BRANCH_NAME }}" \
            --title "Fix #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}" \
            --body "This PR addresses issue #${{ env.ISSUE_NUMBER }} using Aider AI.

          Original issue: #${{ env.ISSUE_NUMBER }}

          Changes were automatically generated based on the issue description.
          Please review these changes carefully before merging.")
          
          echo "Created PR: $PR_URL"
          
          # Comment on the original issue with a link to the PR
          gh issue comment "${{ env.ISSUE_NUMBER }}" --body "I've created a PR with proposed changes: $PR_URL"
      
      - name: Report if no changes were made
        if: steps.check_changes.outputs.has_changes == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment "${{ env.ISSUE_NUMBER }}" --body "Aider was unable to make changes based on the issue description. Please provide more details or specific instructions."