name: Aider Issue Processor

on:
  issues:
    types: [opened, edited, labeled]
jobs:
  parse-issue:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'aider')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create package.json for dependencies
        run: |
          echo '{
            "name": "issue-parser",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "@actions/github": "^5.1.1",
              "@actions/core": "^1.10.1",
              "marked": "^9.1.5"
            }
          }' > package.json
          
      - name: Install dependencies
        run: npm install
        
      - name: Parse issue description
        id: parse-description
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const { marked } = require('marked');
            
            const issue = context.payload.issue;
            if (!issue || !issue.body) {
              core.setFailed('No issue description found');
              return;
            }
            
            // Function to convert markdown to plain text
            function markdownToPlainText(markdown) {
              const renderer = new marked.Renderer();
              
              // Override rendering functions to extract plain text
              renderer.strong = text => text;
              renderer.em = text => text;
              renderer.codespan = text => text;
              renderer.code = (text) => text;
              renderer.link = (href, title, text) => text;
              renderer.list = (body) => body;
              renderer.listitem = text => `${text} `;
              renderer.paragraph = text => text;
              renderer.heading = text => text;
              renderer.br = () => ' ';
              renderer.hr = () => '';
              renderer.table = (header, body) => `${header} ${body}`;
              renderer.tablerow = content => content;
              renderer.tablecell = content => `${content} `;
              
              return marked(markdown, { renderer });
            }
            
            // Extract sections from markdown
            function extractSections(markdown) {
              // Split by headings (## Section)
              const sectionRegex = /^##\s+(.+)$/gm;
              const sections = {};
              
              // Split content by headings
              const parts = markdown.split(sectionRegex);
              
              // First part is anything before the first heading (usually empty)
              parts.shift();
              
              // Process remaining parts (heading, content, heading, content, ...)
              for (let i = 0; i < parts.length; i += 2) {
                if (i + 1 < parts.length) {
                  const sectionName = parts[i].trim();
                  const sectionContent = parts[i + 1].trim();
                  
                  // Convert section content from markdown to plain text
                  const plainText = markdownToPlainText(sectionContent)
                    .replace(/\n+/g, ' ')  // Replace newlines with spaces
                    .replace(/\s+/g, ' ')  // Normalize spaces
                    .trim();
                    
                  sections[sectionName] = plainText;
                }
              }
              
              return sections;
            }
            
            try {
              // Extract sections from markdown
              const parsedSections = extractSections(issue.body);
              
              // Format the result as a single string
              let formattedResult = '';
              for (const [section, content] of Object.entries(parsedSections)) {
                formattedResult += `${section}: ${content} `;
              }
              
              // Trim extra spaces
              formattedResult = formattedResult.trim();
              
              // Add a comment to the issue with the parsed result
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `**Parsed Issue Description:**\n\n${formattedResult}`
              });
              
              // Set output for use in subsequent steps
              core.setOutput('parsed_description', formattedResult);
              
              console.log('Successfully parsed issue description');
            } catch (error) {
              core.setFailed(`Error parsing issue description: ${error.message}`);
              console.error(error);
            }

      - name: Log parsed result
        run: |
          echo "Parsed description: ${{ steps.parse-description.outputs.parsed_description }}"
