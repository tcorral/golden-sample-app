name: Aider Issue Processor

on:
  issues:
    types: [opened, edited, labeled]
jobs:
  parse-issue:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'aider')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install marked package
        run: |
          npm install marked
        
      - name: Parse issue description
        id: parse-description
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            // NOTE: actions/github-script already provides core and github
            const { marked } = require('marked');
            
            const issue = context.payload.issue;
            if (!issue || !issue.body) {
              core.setFailed('No issue description found');
              return;
            }
            
            // Debug: Log issue body
            console.log('Issue body:', issue.body);
            
            // Extract sections from markdown
            function extractSections(markdown) {
              // Split by headings (## Section)
              const sectionRegex = /^##\s+(.+)$/gm;
              const sections = {};
              
              // Find all section headings and their positions
              const headings = [...markdown.matchAll(sectionRegex)];
              
              // Process each section
              for (let i = 0; i < headings.length; i++) {
                const currentHeading = headings[i];
                const nextHeading = headings[i + 1];
                
                const sectionName = currentHeading[1].trim();
                const startPos = currentHeading.index + currentHeading[0].length;
                const endPos = nextHeading ? nextHeading.index : markdown.length;
                
                // Extract section content
                const sectionContent = markdown.substring(startPos, endPos).trim();
                
                // Process the content to remove line breaks and normalize spaces
                // First, transform markdown to plain text
                const renderer = new marked.Renderer();
                
                // Store the plain text result
                let plainText = '';
                
                // Override render methods to extract plain text
                renderer.paragraph = (text) => { plainText += text + ' '; return ''; };
                renderer.list = (body) => { plainText += body + ' '; return ''; };
                renderer.listitem = (text) => { return text + ' '; };
                renderer.br = () => { return ' '; };
                renderer.strong = (text) => { return text; };
                renderer.em = (text) => { return text; };
                renderer.codespan = (text) => { return text; };
                renderer.blockquote = (quote) => { return quote + ' '; };
                
                // Render to extract plain text
                marked(sectionContent, { renderer });
                
                // Clean up the text (remove multiple spaces, normalize line breaks)
                plainText = plainText
                  .replace(/\n+/g, ' ')
                  .replace(/\s+/g, ' ')
                  .trim();
                
                sections[sectionName] = plainText;
              }
              
              return sections;
            }
            
            try {
              // Extract sections from markdown
              const parsedSections = extractSections(issue.body);
              
              // Debug: Log parsed sections
              console.log('Parsed sections:', JSON.stringify(parsedSections, null, 2));
              
              // Format the result as a single string
              let formattedResult = '';
              for (const [section, content] of Object.entries(parsedSections)) {
                formattedResult += `${section}: ${content} `;
              }
              
              // Trim extra spaces
              formattedResult = formattedResult.trim();
              
              // Add a comment to the issue with the parsed result
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `**Parsed Issue Description:**\n\n${formattedResult}`
              });
              
              // Set output for use in subsequent steps
              core.setOutput('parsed_description', formattedResult);
              
              console.log('Successfully parsed issue description');
            } catch (error) {
              console.error('Error details:', error);
              core.setFailed(`Error parsing issue description: ${error.message}`);
            }

      - name: Log parsed result
        run: |
          echo "Parsed description: ${{ steps.parse-description.outputs.parsed_description }}"