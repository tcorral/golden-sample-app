name: Claude Code Automation

# Define explicit permissions
permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  issues:
    types: [labeled]
jobs:
  claude-issue-processor:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'claude-code')
    steps:
      - name: Parse issue description
        id: parse-description
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get issue details
            const issue = context.payload.issue;
            if (!issue || !issue.body) {
              core.setFailed('No issue description found');
              return;
            }
            
            // Debug: Log issue body
            console.log('Processing issue description');
            
            // Simple markdown parser for issue descriptions
            function parseMarkdown(markdown) {
              // Function to convert basic markdown to plain text
              function markdownToPlainText(text) {
                return text
                  // Remove code blocks
                  .replace(/```[\s\S]*?```/g, '')
                  // Remove inline code
                  .replace(/`([^`]+)`/g, '$1')
                  // Remove bold/italic
                  .replace(/\*\*([^*]+)\*\*/g, '$1')
                  .replace(/\*([^*]+)\*/g, '$1')
                  .replace(/__([^_]+)__/g, '$1')
                  .replace(/_([^_]+)_/g, '$1')
                  // Handle lists by replacing bullets with spaces
                  .replace(/^\s*[*-]\s+/gm, '')
                  .replace(/^\s*\d+\.\s+/gm, '')
                  // Normalize whitespace
                  .replace(/\n+/g, ' ')
                  .replace(/\s+/g, ' ')
                  .trim();
              }
              
              // Extract sections (split by ## headings)
              const sections = {};
              const sectionRegex = /##\s+([^\n]+)([^#]*)/g;
              let match;
              
              while ((match = sectionRegex.exec(markdown)) !== null) {
                const sectionName = match[1].trim();
                const sectionContent = markdownToPlainText(match[2]);
                sections[sectionName] = sectionContent;
              }
              
              return sections;
            }
            
            try {
              // Extract sections from markdown
              const parsedSections = parseMarkdown(issue.body);
              
              // Debug: Log parsed sections
              console.log('Parsed sections:', JSON.stringify(parsedSections, null, 2));
              
              // Format the result as a single string
              let formattedResult = '';
              for (const [section, content] of Object.entries(parsedSections)) {
                formattedResult += `${section}: ${content} `;
              }
              
              // Trim extra spaces
              formattedResult = formattedResult.trim();
              
              // Add a comment to the issue with the parsed result
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `**Parsed Issue Description:**\n\n${formattedResult}`
              });
              
              // Set output for use in subsequent steps
              core.setOutput('parsed_description', formattedResult);
              
              console.log('Successfully parsed issue description');
            } catch (error) {
              console.error('Error details:', error);
              core.setFailed(`Error parsing issue description: ${error.message}`);
            }
  
      - name: Log parsed result
        run: |
          echo "Parsed description: ${{ steps.parse-description.outputs.parsed_description }}"

      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code
        run: npm install -g @anthropic-ai/claude-code
      
      - name: Install Expect
        run: sudo apt-get update && sudo apt-get install -y expect

      - name: Ensure script is executable
        run: chmod +x .github/workflows/claude-script.exp

      - name: Create and Switch to a New Branch
        run: |
          # Extract issue number and title
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ISSUE_TITLE="${{ github.event.issue.title }}"

          # Format title: lowercase, replace spaces with dashes, remove special characters
          SAFE_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')

          # Set branch name
          BRANCH_NAME="claude-issue-${ISSUE_NUMBER}-${SAFE_TITLE}"
          echo "Creating branch: $BRANCH_NAME"

          git fetch origin
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

          # Save branch name for later steps
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Execute Claude Code
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          expect .github/workflows/claude-script.exp "${{ steps.parse-description.outputs.parsed_description }}"

      - name: Check for changes
        id: git-check
        run: |
          git status --porcelain
          echo "HAS_CHANGES=$(if git status --porcelain | grep .; then echo "true"; else echo "false"; fi)" >> $GITHUB_ENV
        
      - name: Commit changes
        if: env.HAS_CHANGES == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Claude Code changes for issue #${{ github.event.issue.number }}"
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        if: env.HAS_CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"

            # Create a pull request
            gh pr create \
                --base main \
                --head ${{ env.BRANCH_NAME }} \
                --title "Fix #$ISSUE_NUMBER: $ISSUE_TITLE" \
                --body "This PR resolves issue #$ISSUE_NUMBER by applying the requested changes using Claude."

      - name: Report no changes
        if: env.HAS_CHANGES == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "Claude Code was executed but no changes were made to the codebase. This might be because Claude couldn't understand the request or no changes were needed."