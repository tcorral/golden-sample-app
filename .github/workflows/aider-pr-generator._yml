name: Aider Issue Processor

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  process_aider_issue:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'aider')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install @actions/github @actions/core marked
      
      - name: Parse issue description
        id: parse-description
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const { marked } = require('marked');
            
            const issue = context.payload.issue;
            if (!issue || !issue.body) {
              core.setFailed('No issue description found');
              return;
            }
            
            // Process markdown content
            function extractSections(markdown) {
              // Create a temporary structure to hold parsed content
              const sections = {};
              let currentSection = null;
              
              // Convert markdown to tokens
              const tokens = marked.lexer(markdown);
              
              // Process tokens to extract sections
              for (const token of tokens) {
                if (token.type === 'heading') {
                  currentSection = token.text;
                  sections[currentSection] = [];
                } else if (currentSection && token.type !== 'space') {
                  // Convert token to text representation
                  let textContent = '';
                  
                  if (token.type === 'paragraph') {
                    textContent = token.text;
                  } else if (token.type === 'list') {
                    token.items.forEach(item => {
                      textContent += `${item.text} `;
                    });
                  } else if (token.type === 'strong') {
                    textContent = token.text;
                  } else if (token.text) {
                    textContent = token.text;
                  }
                  
                  if (textContent) {
                    sections[currentSection].push(textContent.trim());
                  }
                }
              }
              
              // Create a single string from all sections
              const result = {};
              for (const [section, contents] of Object.entries(sections)) {
                // Join all content in the section without line breaks
                result[section] = contents.join(' ').replace(/\n/g, ' ');
              }
              
              return result;
            }
            
            try {
              // Extract sections from markdown
              const parsedSections = extractSections(issue.body);
              
              // Format the result as a single string
              let formattedResult = '';
              for (const [section, content] of Object.entries(parsedSections)) {
                if (section.toLowerCase() !== 'title') {  // Skip title as it's already in the issue title
                  formattedResult += `${section}: ${content} `;
                }
              }
              
              // Trim extra spaces and set the output
              formattedResult = formattedResult.trim();
              
              // Add a comment to the issue with the parsed result
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `**Parsed Issue Description:**\n\n${formattedResult}`
              });
              
              // Set output for use in subsequent steps
              core.setOutput('parsed_description', formattedResult);
              
              console.log('Successfully parsed issue description');
            } catch (error) {
              core.setFailed(`Error parsing issue description: ${error.message}`);
            }

      - name: Log parsed result
        run: |
          echo "Parsed description: ${{ steps.parse-description.outputs.parsed_description }}"
      